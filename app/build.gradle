apply plugin: 'com.android.application'

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("sign/keystore.properties")
// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()
// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    // 签名配置
    signingConfigs {
        debugConfig {
            storeFile file(keystoreProperties['debugStoreFile'])
            storePassword keystoreProperties['debugStorePassword']
            keyAlias keystoreProperties['debugKeyAlias']
            keyPassword keystoreProperties['debugKeyPassword']
        }
        releaseConfig {
            storeFile file(keystoreProperties['releaseStoreFile'])
            storePassword keystoreProperties['releaseStorePassword']
            keyAlias keystoreProperties['releaseKeyAlias']
            keyPassword keystoreProperties['releaseKeyPassword']
        }
    }
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.codearms.maoqiqi.sign"
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    // 构建类型配置
    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"

            debuggable true
            jniDebuggable false
            minifyEnabled true
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debugConfig
        }
        release {
            // 定义变量在代码中使用
            buildConfigField "boolean", "LOG_DEBUG", "false"

            debuggable false // 支持断点调试和log信息打印(默认true)
            jniDebuggable false // JNI调试(默认false)
            minifyEnabled false // 压缩类文件代码(默认false)
            useProguard true // 压缩资源文件
            // 混淆文件的位置
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseConfig // 签名配置
        }
    }

    flavorDimensions "default"

    // 产品风味配置
    productFlavors {
        personal {
            applicationId "com.codearms.maoqiqi.sign.personal"
            // versionNameSuffix '-personal'
            versionName '2.0.0'
        }
        enterprise {
            applicationId "com.codearms.maoqiqi.sign.enterprise"
            // versionNameSuffix '-enterprise'
            versionName '1.1.1'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

println "-------------------------------------------------------------------------------------------"
// 默认版本名称
def defaultVersionName = android.defaultConfig.versionName
println "defaultVersionName：" + defaultVersionName

android.applicationVariants.all { variant ->
    println "-------------------------------------------------------------------------------------------"
    println "versionName：" + variant.versionName
    println "flavorName：" + variant.flavorName
    println "buildTypeName：" + variant.buildType.name
    println "productName：" + variant.name

    variant.outputs.all { output ->
        // 时间
        def time = new Date().format('yyyyMMddHHmmss', TimeZone.getTimeZone("UTC"))
        // 要被替换的源字符串
        def sourceFile = "-${variant.flavorName}-${variant.buildType.name}"
        // 替换的字符串
        def replaceFile = "_${variant.flavorName}_${variant.buildType.name}_${variant.versionName}_${time}"
        // 替换
        // 3.3 之前
        // def fileName = output.outputFile.name.replace(sourceFile, replaceFile)
        def fileName = outputFileName.replace(sourceFile, replaceFile)
        println "fileName：" + fileName
        // gradle 3.0 之前
        // output.outputFile = new File(output.outputFile.parent, fileName)
        outputFileName = fileName
    }
}